{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file://E%3A/PingProspect/pingprospect-nextapp/lib/redis.ts"],"sourcesContent":["import { createClient } from 'redis';\r\n\r\nconst client = createClient({\r\n    username: 'default',\r\n    password: process.env.REDIS_PWD,\r\n    socket: {\r\n        host: process.env.REDIS_HOST,\r\n        port: process.env.REDIS_PORT ? parseInt(process.env.REDIS_PORT, 10) : undefined\r\n    }\r\n});\r\n\r\nclient.on('error', err => console.log('Redis Client Error', err));\r\n\r\nif(!client.isOpen) {\r\n\r\n    await client.connect();\r\n}\r\n\r\n\r\nexport {client}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD,EAAE;IACxB,UAAU;IACV,UAAU,QAAQ,GAAG,CAAC,SAAS;IAC/B,QAAQ;QACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU,GAAG,SAAS,QAAQ,GAAG,CAAC,UAAU,EAAE,MAAM;IAC1E;AACJ;AAEA,OAAO,EAAE,CAAC,SAAS,CAAA,MAAO,QAAQ,GAAG,CAAC,sBAAsB;AAE5D,IAAG,CAAC,OAAO,MAAM,EAAE;IAEf,MAAM,OAAO,OAAO;AACxB","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file://E%3A/PingProspect/pingprospect-nextapp/lib/services/Firebase.ts"],"sourcesContent":["\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\r\nimport crypto from \"crypto\"\r\nimport {client } from  \"./../redis\"\r\n\r\n\r\ninterface UserData {\r\n  sub: string;\r\n  fullName: string;\r\n  email: string;\r\n  email_verified: boolean;\r\n  picture: string;\r\n  subscription_status: string;\r\n  user_created_at: Date;\r\n}\r\n\r\nclass Firebase {\r\n  app: any;\r\n  auth: any;\r\n  db: any;\r\n  googleProvider = new GoogleAuthProvider();\r\n\r\n  firebaseConfig = {\r\n    apiKey: process.env.NEXT_PUBLIC_API_KEY,\r\n    authDomain: process.env.NEXT_PUBLIC_AUTH_DOMAIN,\r\n    databaseURL: process.env.NEXT_PUBLIC_DATABASE_URL,\r\n    projectId: process.env.NEXT_PUBLIC_PROJECT_ID,\r\n    appId: process.env.NEXT_PUBLIC_APP_ID,\r\n    measurementId: process.env.NEXT_PUBLIC_MEASUREMENT_ID,\r\n  };\r\n  \r\n\r\n  constructor() {\r\n    this.app = initializeApp(this.firebaseConfig);\r\n    this.auth = getAuth(this.app);\r\n    this.db = getFirestore(this.app);\r\n  }\r\n\r\n  // create document\r\n  async createUserDocument(userData: UserData) {\r\n    try {\r\n      // Create a reference to the document in the \"users\" collection with the ID as userData.sub\r\n      const userRef = doc(this.db, \"users\", userData.sub);\r\n      // Check if the document already exists\r\n      const userDoc = await getDoc(userRef);\r\n      if (!userDoc.exists()) {\r\n        // Document doesnâ€™t exist, so create it\r\n        await setDoc(userRef, userData);\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error creating user document:\", error);\r\n      throw error; // Re-throw the error for handling by the caller\r\n    }\r\n  }\r\n\r\n  async createUserAccount() {\r\n    try {\r\n      const result = await signInWithPopup(this.auth, this.googleProvider);\r\n      const credential = GoogleAuthProvider.credentialFromResult(result);\r\n      const idToken = credential?.idToken;\r\n      const user = result.user;\r\n      const userData = {\r\n        sub: user.uid, // Firebase UID used as the document ID\r\n        fullName: user.displayName || \"\",\r\n        email: user.email || \"\",\r\n        email_verified: user.emailVerified,\r\n        picture: user.photoURL || \"\",\r\n        subscription_status: \"Free\",\r\n        user_created_at: new Date(),\r\n      };\r\n      await this.createUserDocument(userData);\r\n      // Generate a one time code\r\n      const OneTimeCode = crypto.randomBytes(16).toString(\"hex\");\r\n      if(idToken){\r\n        await client.hSet(`users:${OneTimeCode}`,{\r\n          OneTimeCode,\r\n          idToken\r\n        })\r\n      }\r\n      \r\n      if (window !== undefined) {\r\n        window.location.href = \"pingprospect://\" + idToken;\r\n      }\r\n      return idToken;\r\n    } catch (error) {\r\n      console.error(\"Sign-in error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const service = new Firebase();\r\n"],"names":[],"mappings":";;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;AAaA,MAAM;IACJ,IAAS;IACT,KAAU;IACV,GAAQ;IACR,iBAAiB,IAAI,wNAAA,CAAA,qBAAkB,GAAG;IAE1C,iBAAiB;QACf,MAAM;QACN,UAAU;QACV,WAAW;QACX,SAAS;QACT,KAAK;QACL,aAAa;IACf,EAAE;IAGF,aAAc;QACZ,IAAI,CAAC,GAAG,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,IAAI,CAAC,cAAc;QAC5C,IAAI,CAAC,IAAI,GAAG,CAAA,GAAA,6MAAA,CAAA,UAAO,AAAD,EAAE,IAAI,CAAC,GAAG;QAC5B,IAAI,CAAC,EAAE,GAAG,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE,IAAI,CAAC,GAAG;IACjC;IAEA,kBAAkB;IAClB,MAAM,mBAAmB,QAAkB,EAAE;QAC3C,IAAI;YACF,2FAA2F;YAC3F,MAAM,UAAU,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,IAAI,CAAC,EAAE,EAAE,SAAS,SAAS,GAAG;YAClD,uCAAuC;YACvC,MAAM,UAAU,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;YAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI;gBACrB,uCAAuC;gBACvC,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,SAAS;gBACtB,OAAO;YACT;YACA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,MAAM,OAAO,gDAAgD;QAC/D;IACF;IAEA,MAAM,oBAAoB;QACxB,IAAI;YACF,MAAM,SAAS,MAAM,CAAA,GAAA,qNAAA,CAAA,kBAAe,AAAD,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc;YACnE,MAAM,aAAa,wNAAA,CAAA,qBAAkB,CAAC,oBAAoB,CAAC;YAC3D,MAAM,UAAU,YAAY;YAC5B,MAAM,OAAO,OAAO,IAAI;YACxB,MAAM,WAAW;gBACf,KAAK,KAAK,GAAG;gBACb,UAAU,KAAK,WAAW,IAAI;gBAC9B,OAAO,KAAK,KAAK,IAAI;gBACrB,gBAAgB,KAAK,aAAa;gBAClC,SAAS,KAAK,QAAQ,IAAI;gBAC1B,qBAAqB;gBACrB,iBAAiB,IAAI;YACvB;YACA,MAAM,IAAI,CAAC,kBAAkB,CAAC;YAC9B,2BAA2B;YAC3B,MAAM,cAAc,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;YACpD,IAAG,SAAQ;gBACT,MAAM,4GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,aAAa,EAAC;oBACvC;oBACA;gBACF;YACF;YAEA,IAAI,WAAW,WAAW;gBACxB,OAAO,QAAQ,CAAC,IAAI,GAAG,oBAAoB;YAC7C;YACA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kBAAkB;YAChC,MAAM;QACR;IACF;AACF;AAEO,MAAM,UAAU,IAAI","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file://E%3A/PingProspect/pingprospect-nextapp/app/auth/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {service} from \"../../lib/services/Firebase\"\r\n\r\nfunction SignIn() {\r\n\r\n\r\n  async function handleSignin(){\r\n    await service.createUserAccount()\r\n  }\r\n  \r\n  return (\r\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-50 p-4\">\r\n      <div className=\"w-full max-w-md rounded-2xl bg-white p-8 shadow-xl\">\r\n        <h2 className=\"mb-8 text-center text-3xl font-bold text-gray-800\">\r\n          Welcome to PingProspect\r\n        </h2>\r\n        <button\r\n          onClick={handleSignin}\r\n          className=\"w-full rounded-lg bg-[#357AFF] px-4 py-3 text-base font-medium text-white transition-colors hover:bg-[#2E69DE] focus:outline-none focus:ring-2 focus:ring-[#357AFF] focus:ring-offset-2 disabled:opacity-50\"\r\n        >\r\n          <span> SignIn with Google</span>\r\n        </button>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignIn;\r\n"],"names":[],"mappings":";;;;AAEA;;;;;AAFA;;;AAIA,SAAS;IAGP,eAAe;QACb,MAAM,2HAAA,CAAA,UAAO,CAAC,iBAAiB;IACjC;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BAAoD;;;;;;8BAGlE,8OAAC;oBACC,SAAS;oBACT,WAAU;8BAEV,cAAA,8OAAC;kCAAK;;;;;;;;;;;;;;;;;;;;;;AAMhB;uCAEe","debugId":null}}]
}