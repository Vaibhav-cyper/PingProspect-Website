{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/PingProspect/pingprospect-nextapp/lib/services/blog.ts"],"sourcesContent":["'use server'\r\nimport  { createClient}   from \"next-sanity\";\r\n\r\n\r\nconst config = {\r\n  projectId : process.env.PROJECT_ID,\r\n  dataset : process.env.DATASET,\r\n  apiVersion: '2021-08-31', \r\n  token : process.env.TOKEN,\r\n  useCdn: false,\r\n}\r\n\r\nconst client = createClient(config);\r\n\r\nexport async function getallguides() {\r\n  const query =` *[_type == \"post\" && status==\"Live\"]`;\r\n  const posts = await client.fetch(query);\r\n  return posts \r\n};\r\n\r\nexport async function getguide(slug: string) {\r\n  const query = `*[_type == \"post\" && status==\"Live\" && slug.current == '${slug}'][0]`;\r\n  const post = await client.fetch(query);\r\n  return post; \r\n}\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;IAcsB;IAMA","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://E%3A/PingProspect/pingprospect-nextapp/sanity/env.ts"],"sourcesContent":["export const apiVersion =\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2025-04-05'\n\nexport const dataset = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_DATASET'\n)\n\nexport const projectId = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID'\n)\n\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\n  if (v === undefined) {\n    throw new Error(errorMessage)\n  }\n\n  return v\n}\n"],"names":[],"mappings":";;;;;AAAO,MAAM,aACX,QAAQ,GAAG,CAAC,8BAA8B,IAAI;AAEzC,MAAM,UAAU,wDAErB;AAGK,MAAM,YAAY,0DAEvB;AAGF,SAAS,YAAe,CAAgB,EAAE,YAAoB;IAC5D,IAAI,MAAM,WAAW;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["file://E%3A/PingProspect/pingprospect-nextapp/lib/image.ts"],"sourcesContent":["import createImageUrlBuilder from '@sanity/image-url'\nimport { SanityImageSource } from \"@sanity/image-url/lib/types/types\";\n\nimport { dataset, projectId } from '../sanity/env'\n\n// https://www.sanity.io/docs/image-url\nconst builder = createImageUrlBuilder({ projectId, dataset })\n\n\n\nexport const urlFor = (source: SanityImageSource) => {\n  return builder.image(source)\n}\n"],"names":[],"mappings":";;;AAAA;AAGA;;;AAEA,uCAAuC;AACvC,MAAM,UAAU,CAAA,GAAA,gKAAA,CAAA,UAAqB,AAAD,EAAE;IAAE,WAAA,6GAAA,CAAA,YAAS;IAAE,SAAA,6GAAA,CAAA,UAAO;AAAC;AAIpD,MAAM,SAAS,CAAC;IACrB,OAAO,QAAQ,KAAK,CAAC;AACvB","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file://E%3A/PingProspect/pingprospect-nextapp/app/guide/%5B...post%5D/page.tsx"],"sourcesContent":["\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { useParams, redirect } from \"next/navigation\";\nimport { Calendar, Clock, ArrowLeft } from \"lucide-react\";\nimport Link from \"next/link\";\nimport PortableText from \"react-portable-text\";\nimport { getguide } from \"../../../lib/services/blog\";\nimport { urlFor } from \"@/lib/image\";\nimport { Post } from \"../guides\";\n\n\nexport default function BlogPost() {\n  const  params  = useParams() ;\n  const slug = params.post?.[0] || \"\";\n  const [post, setPost] = useState<Post | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function fetchPosts() {\n      try {\n        if (slug !== undefined) {\n          if (typeof slug === \"string\") {\n            const Postresult = await getguide(slug);\n            console.log(Postresult);\n            setPost(Postresult || null);\n          } else {\n            setError(true);\n          }\n        } else {\n          setError(true);\n        }\n      } catch (error) {\n        setError(true);\n        console.error(\"Error fetching posts:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchPosts();\n  }, [slug]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-screen\">\n        <div className=\"loader\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex justify-center items-center h-screen\">\n        <div>Something Went Wrong....</div>\n      </div>\n    );\n  }\n\n  if (!post) {\n    return redirect(\"/guide\");\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-16\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-24\">\n        <Link\n          href=\"/guide\"\n          className=\"inline-flex items-center text-blue-600 hover:text-blue-700 mb-8\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Guides\n        </Link>\n\n        <article className=\"bg-white rounded-2xl shadow-lg overflow-hidden\">\n          <div className=\"h-96 relative\">\n            <img\n              src={urlFor(post.mainImage).url()}\n              alt={post.title}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n\n          <div className=\"p-8\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800\">\n                {post.category || \"General\"}\n              </span>\n            </div>\n\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              {post.title}\n            </h1>\n\n            <div className=\"flex items-center text-sm text-gray-500 gap-4 mb-8\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"h-4 w-4 mr-1\" />\n                {new Date(post._createdAt).toLocaleDateString(\"en-US\", {\n                  month: \"long\",\n                  day: \"numeric\",\n                  year: \"numeric\",\n                })}\n              </div>\n            </div>\n\n            <div className=\"prose max-w-none text-gray-600\">\n              {/* {post.body} */}\n              <PortableText\n                // Pass in block content straight from Sanity.io\n                content={post.body}\n                projectId = {process.env.PROJECTID}\n                dataset = {process.env.DATASETS}\n               \n                // Optionally override marks, decorators, blocks, etc. in a flat\n                // structure without doing any gymnastics\n                serializers={{\n                  h1: (props: React.HTMLAttributes<HTMLHeadingElement>) => <h1 style={{ color: \"black\" }} {...props} />,\n                  h2: (props: React.HTMLAttributes<HTMLHeadingElement>) => <h2 style={{ color: \"black\" }} {...props} />,\n                  h3: (props: React.HTMLAttributes<HTMLHeadingElement>) => <h3 style={{ color: \"black\" }} {...props} />,\n                  h4: (props: React.HTMLAttributes<HTMLHeadingElement>) => <h4 style={{ color: \"black \" }} {...props} />,\n                  p: (props: React.HTMLAttributes<HTMLHeadingElement>) => <p style={{ color: \"black \" }} {...props} />,\n                  a: (props: React.AnchorHTMLAttributes<HTMLAnchorElement>) => <a style={{ color: \"blue \" }} {...props} />,\n                  li: ({ children }: { children: React.ReactNode }) => (\n                    <li className=\"special-list-item\">{children}</li>\n                  ),\n                  \n                }}\n              />\n            </div>\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;AAWe,SAAS;IACtB,MAAO,SAAU,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACzB,MAAM,OAAO,OAAO,IAAI,EAAE,CAAC,EAAE,IAAI;IACjC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,eAAe;YACb,IAAI;gBACF,IAAI,SAAS,WAAW;oBACtB,IAAI,OAAO,SAAS,UAAU;wBAC5B,MAAM,aAAa,MAAM,CAAA,GAAA,uHAAA,CAAA,WAAQ,AAAD,EAAE;wBAClC,QAAQ,GAAG,CAAC;wBACZ,QAAQ,cAAc;oBACxB,OAAO;wBACL,SAAS;oBACX;gBACF,OAAO;oBACL,SAAS;gBACX;YACF,EAAE,OAAO,OAAO;gBACd,SAAS;gBACT,QAAQ,KAAK,CAAC,yBAAyB;YACzC,SAAU;gBACR,WAAW;YACb;QACF;QACA;IACF,GAAG;QAAC;KAAK;IAET,IAAI,SAAS;QACX,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;;;;;;;;;;IAGrB;IAEA,IAAI,OAAO;QACT,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;0BAAI;;;;;;;;;;;IAGX;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,CAAA,GAAA,kIAAA,CAAA,WAAQ,AAAD,EAAE;IAClB;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC,4JAAA,CAAA,UAAI;oBACH,MAAK;oBACL,WAAU;;sCAEV,8OAAC,gNAAA,CAAA,YAAS;4BAAC,WAAU;;;;;;wBAAiB;;;;;;;8BAIxC,8OAAC;oBAAQ,WAAU;;sCACjB,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC;gCACC,KAAK,CAAA,GAAA,4GAAA,CAAA,SAAM,AAAD,EAAE,KAAK,SAAS,EAAE,GAAG;gCAC/B,KAAK,KAAK,KAAK;gCACf,WAAU;;;;;;;;;;;sCAId,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;8CACb,cAAA,8OAAC;wCAAK,WAAU;kDACb,KAAK,QAAQ,IAAI;;;;;;;;;;;8CAItB,8OAAC;oCAAG,WAAU;8CACX,KAAK,KAAK;;;;;;8CAGb,8OAAC;oCAAI,WAAU;8CACb,cAAA,8OAAC;wCAAI,WAAU;;0DACb,8OAAC,0MAAA,CAAA,WAAQ;gDAAC,WAAU;;;;;;4CACnB,IAAI,KAAK,KAAK,UAAU,EAAE,kBAAkB,CAAC,SAAS;gDACrD,OAAO;gDACP,KAAK;gDACL,MAAM;4CACR;;;;;;;;;;;;8CAIJ,8OAAC;oCAAI,WAAU;8CAEb,cAAA,8OAAC,0JAAA,CAAA,UAAY;wCACX,gDAAgD;wCAChD,SAAS,KAAK,IAAI;wCAClB,WAAa,QAAQ,GAAG,CAAC,SAAS;wCAClC,SAAW,QAAQ,GAAG,CAAC,QAAQ;wCAE/B,gEAAgE;wCAChE,yCAAyC;wCACzC,aAAa;4CACX,IAAI,CAAC,sBAAoD,8OAAC;oDAAG,OAAO;wDAAE,OAAO;oDAAQ;oDAAI,GAAG,KAAK;;;;;;4CACjG,IAAI,CAAC,sBAAoD,8OAAC;oDAAG,OAAO;wDAAE,OAAO;oDAAQ;oDAAI,GAAG,KAAK;;;;;;4CACjG,IAAI,CAAC,sBAAoD,8OAAC;oDAAG,OAAO;wDAAE,OAAO;oDAAQ;oDAAI,GAAG,KAAK;;;;;;4CACjG,IAAI,CAAC,sBAAoD,8OAAC;oDAAG,OAAO;wDAAE,OAAO;oDAAS;oDAAI,GAAG,KAAK;;;;;;4CAClG,GAAG,CAAC,sBAAoD,8OAAC;oDAAE,OAAO;wDAAE,OAAO;oDAAS;oDAAI,GAAG,KAAK;;;;;;4CAChG,GAAG,CAAC,sBAAyD,8OAAC;oDAAE,OAAO;wDAAE,OAAO;oDAAQ;oDAAI,GAAG,KAAK;;;;;;4CACpG,IAAI,CAAC,EAAE,QAAQ,EAAiC,iBAC9C,8OAAC;oDAAG,WAAU;8DAAqB;;;;;;wCAGvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQhB","debugId":null}}]
}