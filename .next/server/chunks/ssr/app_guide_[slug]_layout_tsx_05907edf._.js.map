{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/PingProspect/pingprospect-nextapp/app/guide/%5Bslug%5D/layout.tsx"],"sourcesContent":["import { getguide } from \"@/lib/services/blog\"; // Adjust the import path as per your project structure\r\nimport { Metadata } from \"next\";\r\nimport { Post } from \"../guides\";\r\nimport { urlFor } from \"@/lib/image\";\r\n\r\n// Define props for the layout\r\ntype Props = {\r\n  params: { slug: string };\r\n  children: React.ReactNode;\r\n};\r\n\r\n// Generate metadata dynamically based on the slug\r\nexport async function generateMetadata({ params }: Props): Promise<Metadata> {\r\n  const { slug } = await params; // Destructure slug from params\r\n  const post: Post = await getguide(slug);\r\n  // Default metadata if no post is found\r\n  if (!post) {\r\n    return {\r\n      title: \"Guide Post Not Found | PingProspect\",\r\n      description:\r\n        \"This guide post could not be found. Explore other guides on PingProspect.\",\r\n    };\r\n  }\r\n\r\n  // Dynamic metadata based on fetched post data\r\n  const title = post.title || \"PingProspect Guide\";\r\n  const description =\r\n    post.meta_description ||\r\n    \"Learn more about automating your Facebook outreach with PingProspect.\";\r\n  const keywords =\r\n    post.keywords || \"PingProspect, Facebook outreach, automation\";\r\n\r\n  return {\r\n    title,\r\n    description,\r\n    keywords,\r\n    openGraph: {\r\n      title,\r\n      description,\r\n      url: `https://pingprospect.com/guide/${slug}`, // Replace with your actual domain\r\n      type: \"article\",\r\n      images: [\r\n        {\r\n          url: urlFor(post.mainImage.asset._ref).url(),\r\n          width: 1280,\r\n          height: 720,\r\n          alt: post.title,\r\n        },\r\n      ],\r\n    },\r\n    twitter: {\r\n      card: \"summary_large_image\",\r\n      title,\r\n      description,\r\n      images: [urlFor(post.mainImage.asset._ref).url()],\r\n    },\r\n    robots: {\r\n      index: true,\r\n      follow: true,\r\n      noarchive: false,  // Allow archiving\r\n      nosnippet: false,\r\n    },\r\n  };\r\n}\r\n\r\nexport default async function GuidePostLayout({ children }: Props) {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        {children}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAYO,eAAe,iBAAiB,EAAE,MAAM,EAAS;IACtD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,+BAA+B;IAC9D,MAAM,OAAa,MAAM,SAAS;IAClC,uCAAuC;IACvC,IAAI,CAAC,MAAM;QACT,OAAO;YACL,OAAO;YACP,aACE;QACJ;IACF;IAEA,8CAA8C;IAC9C,MAAM,QAAQ,KAAK,KAAK,IAAI;IAC5B,MAAM,cACJ,KAAK,gBAAgB,IACrB;IACF,MAAM,WACJ,KAAK,QAAQ,IAAI;IAEnB,OAAO;QACL;QACA;QACA;QACA,WAAW;YACT;YACA;YACA,KAAK,CAAC,+BAA+B,EAAE,MAAM;YAC7C,MAAM;YACN,QAAQ;gBACN;oBACE,KAAK,OAAO,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG;oBAC1C,OAAO;oBACP,QAAQ;oBACR,KAAK,KAAK,KAAK;gBACjB;aACD;QACH;QACA,SAAS;YACP,MAAM;YACN;YACA;YACA,QAAQ;gBAAC,OAAO,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG;aAAG;QACnD;QACA,QAAQ;YACN,OAAO;YACP,QAAQ;YACR,WAAW;YACX,WAAW;QACb;IACF;AACF;AAEe,eAAe,gBAAgB,EAAE,QAAQ,EAAS;IAC/D,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAK,WAAU;sBACb;;;;;;;;;;;AAIT","debugId":null}}]
}